package com.example.demo;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import java.util.*;
import java.io.File;
import java.io.FileOutputStream;
import org.json.simple.JSONObject;
import org.json.simple.parser.ParseException;
import org.json.JSONArray;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.MediaType;
import org.springframework.web.multipart.MultipartFile;
import com.example.demo.SqlTableRepository;


@RestController
@RequestMapping("/employees")
@CrossOrigin(origins = "*", allowedHeaders = "*", allowCredentials = "true")
public class EmployeeController {
	@Autowired
	EmployeeService service;
	@Autowired
	private RestTemplate restTemplate;
	@Autowired
	BooksRepository booksRepository;
	 @Autowired // This means to get the bean called userRepository
     // Which is auto-generated by Spring, we will use it to handle the data
      private SqlTableRepository sqlTableReposiotry;

@CrossOrigin(origins = "*")
@PostMapping("/sqladd")
public SqlTable addNewUser( @RequestBody SqlTable sqlTable) {

	return sqlTableReposiotry.save(sqlTable);
}
@GetMapping(path="/sqlgetall")
public @ResponseBody Iterable<SqlTable> getAllUsers() {
// This returns a JSON or XML with the users
	List<SqlTable> sqlTable = new ArrayList<SqlTable>();
	sqlTableReposiotry.findAll().forEach(sqlTable1 -> sqlTable.add(sqlTable1));
	System.out.println("sqlTable----"+sqlTable);
	
	
	return sqlTable;

}

/***************************************************books******************************************************/

@PostMapping("/books")
public int saveBook(@Valid @RequestBody Books books) {
	service.saveOrUpdate(books);
	return books.getBookid();
}

@GetMapping("/book")
public @ResponseBody List<Books> getAllBooks() {
	
	List<Books> books = new ArrayList<Books>();
	booksRepository.findAll().forEach(books1 -> books.add(books1));
	System.out.println(books);
	return books;
}

/******************************Employee********************************************/
	@GetMapping
	public ResponseEntity<List<Employee>> getAllEmployees() {
		List<Employee> list = service.getAllEmployees();

		return new ResponseEntity<List<Employee>>(list, new HttpHeaders(), HttpStatus.OK);
	}

	@GetMapping("/{id}")
	public JSONObject getEmployeeById(@PathVariable("id") Long id) throws RecordNotFoundException, InterruptedException {
		JSONObject response = new JSONObject();

		try {
	        System.out.println("Searching by ID  : " + id);

			Employee entity = service.getEmployeeById(id);

			response.put("message", entity);
		} catch (RecordNotFoundException e) {
			response.put("message", e.getErrorMessage());
		}
		return response;
	}
	  @GetMapping("/emp/{id}")
	    public Employee findStudentById(@PathVariable String id) 
	    {
	        System.out.println("Searching by ID  : " + id);
	 
	        return service.getStudentByID(id);
	    }
	@PostMapping
	public ResponseEntity<Employee> createOrUpdateEmployee(Employee employee) throws RecordNotFoundException {
		Employee updated = service.createOrUpdateEmployee(employee);
		return new ResponseEntity<Employee>(updated, new HttpHeaders(), HttpStatus.OK);
	}

	@DeleteMapping("/{id}")
	public HttpStatus deleteEmployeeById(@PathVariable("id") Long id) throws RecordNotFoundException {
		service.deleteEmployeeById(id);
		return HttpStatus.FORBIDDEN;
	}


	/*************************************************************************************************/

	@RequestMapping(value = "/json", method = RequestMethod.POST)

	public JSONObject start(@RequestBody Map<String, Object> data) throws Exception {
		JSONObject data1 = new JSONObject(data);
		System.out.println("data1" + data1);

		return data1;
	}

	@CrossOrigin(origins = "*")
	@RequestMapping(value = "/jsonparsing", method = RequestMethod.POST)
	public JSONObject jsonparsing(HttpServletRequest request, @RequestBody JSONObject inputData) {
		JSONObject response = new JSONObject();

		try {
			response.put("message", service.jsonparsing(inputData));
		} catch (JsonParsingException e) {
			response.put("message", e.getErrorMessage());

		}
		return response;
	}
/*******************************************************************************/
	@RequestMapping(value = "/file", method = RequestMethod.GET)

	public JSONObject sonmodulesShortNames() {
		JSONObject response = new JSONObject();
		try {
			response.put("message", service.sonmodulesShortNames());
		} catch (IOException e) {
			response.put("message", e.getMessage());
		} catch (ParseException e) {
			response.put("message", e.getMessage());

		}
		return response;
	}

	@RequestMapping(value = "/upload", method = RequestMethod.POST, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)

	public String fileUpload(@RequestParam("file") MultipartFile file) throws IOException {
		File convertFile = new File("/var/tmp/" + file.getOriginalFilename());
		convertFile.createNewFile();
		FileOutputStream fout = new FileOutputStream(convertFile);
		fout.write(file.getBytes());
		fout.close();
		return "File is upload successfully";
	}

	/**Rest templates**************************************************************************************/
	 @RequestMapping(value = "/products")
	   public String getProductList() {

		    final String uri = "http://localhost:8080/employees";
		     
		    RestTemplate restTemplate = new RestTemplate();
		    String result = restTemplate.getForObject(uri, String.class);
		     
return result;
	 }
@RequestMapping(value = "/products", method = RequestMethod.POST)
public String createProducts(@RequestBody Employee employee) {
   HttpHeaders headers = new HttpHeaders();
   headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
   HttpEntity<Employee> entity = new HttpEntity<Employee>(employee,headers);
   
   return restTemplate.exchange(
      "http://localhost:8080/employees/books", HttpMethod.POST, entity, String.class).getBody();
}
@RequestMapping(value = "/products/{id}", method = RequestMethod.DELETE)
public String deleteProduct(@PathVariable("id") String id) {
   HttpHeaders headers = new HttpHeaders();
   headers.setAccept(Arrays.asList(MediaType.APPLICATION_JSON));
   HttpEntity<Employee> entity = new HttpEntity<Employee>(headers);
   
   return restTemplate.exchange(
      "http://localhost:8080/employees/"+id, HttpMethod.DELETE, entity, String.class).getBody();
}

@GetMapping(value = "/greeting")
public String greeting() {
	return "I am working with both HTTP and HTTPS";
}

}